var BASE_URL = localStorageGetItem("baseUrl") || "https://api.judge0.com";
var SUBMISSION_CHECK_TIMEOUT = 10; // in ms
var WAIT = localStorageGetItem("wait") == "true";

var sourceEditor, inputEditor, outputEditor;
var $insertTemplateBtn, $selectLanguageBtn, $runBtn, $saveBtn, $vimCheckBox;
var $statusLine, $emptyIndicator;
var timeStart, timeEnd;

function encode(str) {
  return btoa(unescape(encodeURIComponent(str)));
}

function decode(bytes) {
  var escaped = escape(atob(bytes));
  try {
    return decodeURIComponent(escaped);
  } catch (error){
    return unescape(escaped);
  }
}

function getIdFromURI() {
  return location.search.substr(1).trim();
}

function updateEmptyIndicator() {
  if (outputEditor.getValue() == "") {
    $emptyIndicator.html("empty");
  } else {
    $emptyIndicator.html("");
  }
}

function handleError(jqXHR, textStatus, errorThrown) {
  outputEditor.setValue(JSON.stringify(jqXHR, null, 4));
  $statusLine.html(`${jqXHR.statusText} (${jqXHR.status})`);
}

function handleRunError(jqXHR, textStatus, errorThrown) {
  handleError(jqXHR, textStatus, errorThrown);
  $runBtn.button("reset");
  updateEmptyIndicator();
}

function handleResult(data) {
  timeEnd = performance.now();
  console.log("It took " + (timeEnd - timeStart) + " ms to get submission result.");

  var status = data.status;
  var stdout = decode(data.stdout || "");
  var stderr = decode(data.stderr || "");
  var compile_output = decode(data.compile_output || "");
  var message = decode(data.message || "");
  var time = (data.time === null ? "-" : data.time + "s");
  var memory = (data.memory === null ? "-" : data.memory + "KB");

  $statusLine.html(`${status.description}, ${time}, ${memory}`);

  if (status.id == 6) {
    stdout = compile_output;
  } else if (status.id == 13) {
    stdout = message;
  } else if (status.id != 3 && stderr != "") { // If status is not "Accepted", merge stdout and stderr
    stdout += (stdout == "" ? "" : "\n") + stderr;
  }

  outputEditor.setValue(stdout);

  updateEmptyIndicator();
  $runBtn.button("reset");
}

function toggleVim() {
  var keyMap = vimCheckBox.checked ? "vim" : "default";
  localStorageSetItem("keyMap", keyMap);
  sourceEditor.setOption("keyMap", keyMap);
  focusAndSetCursorAtTheEnd();
}

function run() {
  if (sourceEditor.getValue().trim() == "") {
    alert("Source code can't be empty.");
    return;
  } else {
    $runBtn.button("loading");
  }

  var sourceValue = encode(sourceEditor.getValue());
  var inputValue = encode(inputEditor.getValue());
  var languageId = $selectLanguageBtn.val();
  var data = {
    source_code: sourceValue,
    language_id: languageId,
    stdin: inputValue
  };

  timeStart = performance.now();
  $.ajax({
    url: BASE_URL + `/submissions?base64_encoded=true&wait=${WAIT}`,
    type: "POST",
    async: true,
    contentType: "application/json",
    data: JSON.stringify(data),
    success: function(data, textStatus, jqXHR) {
      console.log(`Your submission token is: ${data.token}`);
      if (WAIT == true) {
        handleResult(data);
      } else {
        setTimeout(fetchSubmission.bind(null, data.token), SUBMISSION_CHECK_TIMEOUT);
      }
    },
    error: handleRunError
  });
}

function fetchSubmission(submission_token) {
  $.ajax({
    url: BASE_URL + "/submissions/" + submission_token + "?base64_encoded=true",
    type: "GET",
    async: true,
    success: function(data, textStatus, jqXHR) {
      if (data.status.id <= 2) { // In Queue or Processing
        setTimeout(fetchSubmission.bind(null, submission_token), SUBMISSION_CHECK_TIMEOUT);
        return;
      }
      handleResult(data);
    },
    error: handleRunError
  });
}

function setEditorMode() {
  sourceEditor.setOption("mode", $selectLanguageBtn.find(":selected").attr("mode"));
}

function focusAndSetCursorAtTheEnd() {
  sourceEditor.focus();
  sourceEditor.setCursor(sourceEditor.lineCount(), 0);
}

function initializeElements() {
  $selectLanguageBtn = $("#selectLanguageBtn");
  $insertTemplateBtn = $("#insertTemplateBtn");
  $runBtn = $("#runBtn");
  $saveBtn = $("#saveBtn");
  $vimCheckBox = $("#vimCheckBox");
  $emptyIndicator = $("#emptyIndicator");
  $statusLine = $("#statusLine");
}

function localStorageSetItem(key, value) {
  try {
    localStorage.setItem(key, value);
  } catch (ignorable) {
  }
}

function localStorageGetItem(key) {
  try {
    return localStorage.getItem(key);
  } catch (ignorable) {
    return null;
  }
}

$(document).ready(function() {
  console.log("Hey, Judge0 IDE is open-sourced: https://github.com/judge0/ide. Have fun!");

  initializeElements();

  $(function () {
    $('[data-toggle="tooltip"]').tooltip()
  });

  sourceEditor = CodeMirror(document.getElementById("sourceEditor"), {
    lineNumbers: true,
    indentUnit: 4,
    indentWithTabs: true,
    showCursorWhenSelecting: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    keyMap: localStorageGetItem("keyMap") || "default",
    extraKeys: {
      "Tab": function(cm) {
        var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
        cm.replaceSelection(spaces);
      }
    }
  });

  inputEditor = CodeMirror(document.getElementById("inputEditor"), {
    lineNumbers: true,
    mode: "plain"
  });
  outputEditor = CodeMirror(document.getElementById("outputEditor"), {
    readOnly: true,
    mode: "plain"
  });

  $vimCheckBox.prop("checked", localStorageGetItem("keyMap") == "vim").change();

  if (BASE_URL != "https://api.judge0.com") {
    $("#apiLink").attr("href", BASE_URL);
    $("#apiLink").html(BASE_URL);
  }

  $selectLanguageBtn.change(function(e) {
    if (sourceEditor.isClean()) {
      insertTemplate();
    }
    setEditorMode();
  });

  $("body").keydown(function(e){
    var keyCode = e.keyCode || e.which;
    if (keyCode == 120) { // F9
      e.preventDefault();
      run();
    } else if (keyCode == 119) { // F8
      e.preventDefault();
      var url = prompt("Enter URL of Judge0 API:", BASE_URL);
      if (url != null) {
        url = url.trim();
      }
      if (url != null && url != "") {
        BASE_URL = url;
        localStorageSetItem("baseUrl", BASE_URL);
        if (BASE_URL != "https://api.judge0.com") {
          $("#apiLink").attr("href", BASE_URL);
          $("#apiLink").html(BASE_URL);
        }
      }
    } else if (keyCode == 118) { // F7
      e.preventDefault();
      WAIT=!WAIT;
      localStorageSetItem("wait", WAIT);
      alert(`Submission wait is ${WAIT ? "ON. Enjoy" : "OFF"}.`);
    } else if (event.ctrlKey && keyCode == 83) { // Ctrl+S
      e.preventDefault();
      save();
    }
  });

  $runBtn.click(function(e) {
	var inputContent = $("#input").val();
	inputEditor.setValue(inputContent);
    run();
    var outputContent = $("#input").val();
	inputEditor.setValue(inputContent);
  });

  CodeMirror.commands.save = function(){ };
  
  $vimCheckBox.change(function() {
    toggleVim();
  });

});

var fileNames = {
  1: "script.sh",
  2: "script.sh",
  3: "main.bas",
  4: "main.c",
  5: "main.c",
  6: "main.c",
  7: "main.c",
  8: "main.c",
  9: "main.c",
 10: "main.cpp",
 11: "main.cpp",
 12: "main.cpp",
 13: "main.cpp",
 14: "main.cpp",
 15: "main.cpp",
 16: "Main.cs",
 17: "Main.cs",
 18: "main.clj",
 19: "main.cr",
 20: "main.exs",
 21: "main.erl",
 22: "main.go",
 23: "main.hs",
 24: "main.hs",
 25: "main.ins",
 26: "Main.java",
 27: "Main.java",
 28: "Main.java",
 29: "main.js",
 30: "main.js",
 31: "main.ml",
 32: "file.m",
 33: "main.pas",
 34: "main.py",
 35: "main.py",
 36: "main.py",
 37: "main.py",
 38: "main.rb",
 39: "main.rb",
 40: "main.rb",
 41: "main.rb",
 42: "main.rs",
 43: "source.txt"
};
